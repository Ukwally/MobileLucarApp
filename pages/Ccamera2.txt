//CAPTURAR IMAGEM E FAZER OCR COM REAC
import React, { useRef, useEffect, useState } from 'react';
import { View, TouchableOpacity, Text, StyleSheet, Alert, ActivityIndicator } from 'react-native';
import { Camera } from 'expo-camera';
import * as TextRecognition from 'expo-text-recognition';

const CustomCameraScreen = ({ onCapture }) => {
  const cameraRef = useRef(null);
  const [hasPermission, setHasPermission] = useState(null);
  const [cameraReady, setCameraReady] = useState(false);
  const [isProcessing, setIsProcessing] = useState(false);
  const [detectedPlate, setDetectedPlate] = useState(null);

  useEffect(() => {
    (async () => {
      const { status } = await Camera.requestCameraPermissionsAsync();
      setHasPermission(status === 'granted');
    })();
  }, []);

  const handleCapture = async () => {
    if (cameraReady && cameraRef.current && !isProcessing) {
      setIsProcessing(true);
      try {
        const photo = await cameraRef.current.takePictureAsync({ quality: 0.5 });
        const result = await TextRecognition.recognize(photo.uri);

        if (result.length > 0) {
          //const plate = result.find(text => /^[A-Z]{2}-\d{2}-\d{2}-[A-Z]{2}$/i.test(text));
          const plate = result.find(text => /^[A-Z]{2}-\d{2}(?:-\d{2})?-[A-Z]{2}$/i.test(text));

          setDetectedPlate(plate || result[0]);
          if (onCapture) onCapture(photo.uri);
        } else {
          Alert.alert('Nenhum texto detectado');
        }
      } catch (error) {
        console.error(error);
        Alert.alert('Erro', 'Falha ao processar imagem');
      } finally {
        setIsProcessing(false);
      }
    }
  };

  if (hasPermission === null) {
    return <View style={styles.center}><Text>Verificando permissões...</Text></View>;
  }

  if (!hasPermission) {
    return <View style={styles.center}><Text>Permissão à câmera negada</Text></View>;
  }

  return (
    <View style={styles.container}>
      <Camera
        ref={cameraRef}
        style={styles.camera}
        type={Camera.Constants.Type.back}
        onCameraReady={() => setCameraReady(true)}
      />

      {/* Overlay com retângulo de foco */}
      <View style={styles.overlay}>
        <View style={styles.focusBox} />
      </View>

      {/* Texto detectado */}
      {detectedPlate && (
        <View style={styles.resultBox}>
          <Text style={styles.plateText}>Placa: {detectedPlate}</Text>
        </View>
      )}

      {/* Controles */}
      <View style={styles.controls}>
        <TouchableOpacity onPress={handleCapture} style={styles.captureButton} disabled={isProcessing}>
          {isProcessing ? (
            <ActivityIndicator size="small" color="black" />
          ) : (
            <Text style={styles.buttonText}>Capturar</Text>
          )}
        </TouchableOpacity>
      </View>
    </View>
  );
};

const styles = StyleSheet.create({
  container: { flex: 1 },
  camera: { flex: 1 },
  overlay: {
    position: 'absolute',
    top: 0, left: 0, right: 0, bottom: 0,
    justifyContent: 'center',
    alignItems: 'center',
  },
  focusBox: {
    width: 250,
    height: 100,
    borderColor: 'white',
    borderWidth: 2,
    borderRadius: 20,
    backgroundColor: 'rgba(0, 0, 0, 0.3)',
  },
  controls: {
    position: 'absolute',
    bottom: 20,
    width: '100%',
    alignItems: 'center',
  },
  captureButton: {
    backgroundColor: 'white',
    padding: 12,
    paddingHorizontal: 30,
    borderRadius: 8,
  },
  buttonText: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  resultBox: {
    position: 'absolute',
    top: 50,
    alignSelf: 'center',
    backgroundColor: 'black',
    padding: 10,
    borderRadius: 8,
  },
  plateText: {
    color: 'white',
    fontSize: 18,
    fontWeight: 'bold',
  },
  center: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
});

export default CustomCameraScreen;

//LOGIN COM AXIOS
import React, { useState } from 'react';
import { StyleSheet, Text, View, TextInput, TouchableOpacity, ScrollView, Image, Modal, Pressable, Alert } from 'react-native';
import { BlurView } from 'expo-blur';
import AsyncStorage from '@react-native-async-storage/async-storage';
import axios from 'axios'; // Importando axios

export default function LoginScreen({ navigation }) {

  const [modalVisible, setModalVisible] = useState(false);
  const [userId, setUserId] = useState('');
  const [password, setPassword] = useState('');
  const [userData, setUserData] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const handleLogin = async () => {
    if (!userId || !password) {
      Alert.alert('Erro', 'Por favor, preencha todos os campos');
      return;
    }

    setIsLoading(true);
    
    try {
      console.log('Tentando login com Axios...');
      
      const response = await axios.post('http://192.168.43.22:3000/login', {
        userId,
        password
      }, {
        timeout: 10000, // 10 segundos de timeout
        headers: {
          'Content-Type': 'application/json',
        }
      });

      console.log('Resposta recebida:', response.data);
      
      if (response.data.success) {
        await AsyncStorage.setItem('token', response.data.user.tech_number);
        setUserData(response.data.user);
        navigation.navigate('HomeS', { user: response.data.user }); 
      } else {
        Alert.alert('Erro', response.data.message || 'Credenciais erradas');
      }
    } catch (error) {
      console.error('Erro detalhado com Axios:', error);
      
      if (error.code === 'ECONNABORTED') {
        Alert.alert('Erro', 'Timeout - Servidor não respondeu a tempo');
      } else if (error.response) {
        // O servidor respondeu com um status de erro
        console.error('Status do erro:', error.response.status);
        console.error('Dados do erro:', error.response.data);
        
        if (error.response.status === 401) {
          Alert.alert('Erro', 'Credenciais inválidas');
        } else {
          Alert.alert('Erro', `Erro do servidor: ${error.response.status}`);
        }
      } else if (error.request) {
        // A requisição foi feita mas não houve resposta
        console.error('Sem resposta do servidor:', error.request);
        Alert.alert('Erro', 'Não foi possível conectar ao servidor. Verifique a conexão.');
      } else {
        // Outro tipo de erro
        Alert.alert('Erro', `Erro inesperado: ${error.message}`);
      }
    } finally {
      setIsLoading(false);
    }
  };  

  return (
    <View style={styles.container}>
      {/* Cabeçalho com botão de configurações */}
      <View style={styles.header}>
        <TouchableOpacity style={styles.settingsButton} onPress={() => setModalVisible(true)}>
          <Image
            source={require('../assets/settings-icon2.png')}
            style={styles.settingsIcon}
          />
        </TouchableOpacity>
      </View>
      
      {/* Conteúdo principal */}
      <ScrollView contentContainerStyle={styles.innerContainer}>
        <Text style={styles.logoText}>LUCAR</Text>
        <Text style={styles.welcomeText}>Bem-vindo</Text>

        <TextInput 
          style={styles.input}
          placeholder="ID"
          placeholderTextColor="#aaa"
          value={userId}
          onChangeText={setUserId}
          editable={!isLoading}
        />
        
        <TextInput 
          style={styles.input}
          placeholder="Senha"
          placeholderTextColor="#aaa"
          secureTextEntry
          value={password}
          onChangeText={setPassword}
          editable={!isLoading}
        />

        <TouchableOpacity 
          style={[styles.button, isLoading && styles.buttonDisabled]} 
          onPress={handleLogin}
          disabled={isLoading}
        >
          <Text style={styles.buttonText}>
            {isLoading ? 'CONECTANDO...' : 'COMEÇAR'}
          </Text>
        </TouchableOpacity>

        <Text style={styles.privacyPolicy}>
          Políticas e Regulamentos
        </Text>
      </ScrollView>
      
      {/* Modal de Configurações */}
      <Modal
        animationType="slide"
        transparent={true}
        visible={modalVisible}
        onRequestClose={() => setModalVisible(false)} 
      >
        <View style={styles.modalOverlay}>
          <BlurView
            style={styles.absolute}
            intensity={400} 
            blurType="dark" 
          />
          <View style={styles.modalContent}>
            <Text style={styles.modalTitle}>Configurações</Text>
            <TouchableOpacity style={styles.modalButton}>
              <Text style={styles.modalButtonText}>DESFAZER USUÁRIO</Text>
            </TouchableOpacity>
          
            <TouchableOpacity style={styles.modalButton}>
              <Text style={styles.modalButtonText}>DEFINIR USUÁRIO PADRÃO</Text>
            </TouchableOpacity>
            
            <Pressable
              style={styles.modalCloseButton}
              onPress={() => setModalVisible(false)}
            >
              <Text style={styles.modalCloseButtonText}>Fechar</Text>
            </Pressable>
          </View>
        </View>
      </Modal>
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#87CEFA',
    justifyContent: 'center',
  },

  header: {
    height: 60,
    backgroundColor: '#4682B4',
    justifyContent: 'center',
    paddingHorizontal: 20,
    position: 'relative',
  },
  
  settingsButton: {
    position: 'absolute',
    top: 20,
    right: 20,
    zIndex: 1,
  },
  
  settingsIcon: {
    width: 30,
    height: 30, 
  },

  innerContainer: {
    padding: 20,
    alignItems: 'center',
  },

  logoText: {
    fontSize: 36,
    fontWeight: '800',
    marginBottom: 10,
    marginTop: 40,
    color: '#4682B4',
  },

  welcomeText: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 40,
    color: '#fff',
  },
  
  input: {
    height: 40,
    width: '100%',
    backgroundColor: '#fff',
    borderRadius: 2,
    paddingHorizontal: 10,
    marginBottom: 15,
  },
  
  button: {
    backgroundColor: '#4682B4',
    paddingVertical: 10,
    paddingHorizontal: 20,
    borderRadius: 2,
    marginTop: 10,
  },
  
  buttonDisabled: {
    backgroundColor: '#a9cce3',
  },
  
  buttonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  
  privacyPolicy: {
    marginTop: 20,
    color: '#fff',
    textDecorationLine: 'underline',
  },
  
  modalOverlay: {
    flex: 1,
    justifyContent: 'center',
    alignItems: 'center',
  },
  
  modalContent: {
    width: '80%',
    padding: 20,
    backgroundColor: '#fff',
    borderRadius: 10,
    alignItems: 'center',
  },
  
  modalTitle: {
    fontSize: 18,
    fontWeight: 'bold',
    marginBottom: 10,
  },
  
  modalButton: {
    width: '100%',
    padding: 10,
    borderRadius: 5,
    backgroundColor: '#a9cce3',
    marginVertical: 5,
    alignItems: 'center',
  },
  
  modalButtonText: {
    color: 'white',
    fontSize: 16,
  },
  
  modalCloseButton: {
    marginTop: 20,
    padding: 10,
    backgroundColor: '#5499c7',
    borderRadius: 5,
  },
  
  modalCloseButtonText: {
    color: '#fff',
    fontSize: 16,
    fontWeight: 'bold',
  },
  
  absolute: {
    ...StyleSheet.absoluteFillObject,
  },
});